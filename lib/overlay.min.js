!function(e,s){"object"==typeof exports&&"undefined"!=typeof module?module.exports=s():"function"==typeof define&&define.amd?define(s):(e="undefined"!=typeof globalThis?globalThis:e||self).OverlayAPI=s()}(this,(function(){"use strict";class e{constructor(){this.queue=[],this.apiStatus=!1,this.subscribers={},this.wsURL=/[\?&]OVERLAY_WS=([^&]+)/.exec(this.url),this.wsURL?(this.ws=null,this.responsePromises={},this.initWS()):this.initAPI()}initAPI(){if(window.OverlayPluginApi&&window.OverlayPluginApi.ready){var e=this.queue;for(var{obj:s,cb:i}of(this.queue.length=0,this.apiStatus=!0,window.__OverlayCallback=this.triggerEvent.bind(this),e))window.OverlayPluginApi.callHandler(JSON.stringify(s),i)}else setTimeout(this.initAPI,200)}initWS(){ws=new WebSocket(this.wsURL[1]),ws.addEventListener("error",e=>{console.error(e)}),ws.addEventListener("open",()=>{console.log("[API] WebSocket connected");var e=this.queue;for(var s of(this.queue.length=0,this.apiStatus=!0,e))this.sendMessage(s)}),ws.addEventListener("message",e=>{try{e=JSON.parse(e.data)}catch(s){return void console.error("[API] Invalid message received: ",e)}void 0!==e.rseq&&this.responsePromises[e.rseq]?(this.responsePromises[e.rseq](e),delete this.responsePromises[e.rseq]):this.triggerEvent(e)}),ws.addEventListener("close",()=>{this.apiStatus=!1,console.log("[API] Trying to reconnect..."),setTimeout(()=>{this.initWS()},200)})}sendMessage(e,s){if(this.wsURL)if(this.apiStatus)try{ws.send(JSON.stringify(e))}catch(s){return void console.error("[API] Error stringfy message: ",e)}else this.queue.push(e);else if(this.apiStatus)try{window.OverlayPluginApi.callHandler(JSON.stringify(e),s)}catch(s){return void console.error("[API] Error stringfy message: ",e)}else this.queue.push({obj:e,cb:s})}triggerEvent(e){if(this.subscribers[e.type])for(var s of this.subscribers[e.type])s(e)}addOverlayListener(e,s){this.subscribers[e]||(this.subscribers[e]=[]),this.subscribers[e].push(s)}removeOverlayListener(e,s){if(this.subscribers[e]){var i=this.subscribers[e],t=i.indexOf(s);t>-1&&i.splice(t,1)}}startOverlayEvents(){this.sendMessage({call:"subscribe",events:Object.keys(this.subscribers)})}callOverlayHandler(e){return new Promise((s,i)=>{this.sendMessage(e,e=>{try{null==e||JSON.parse(e)}catch(s){return console.error("[API] Error stringfy message: ",e),i(s)}return s(rd)})})}}var s={CombatData:e=>{console.log(e)},LogLine:null,ImportedLogLines:null,ChangeZone:null,ChangePrimaryPlayer:null,OnlineStatusChanged:null};return class{constructor(){var i=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.options=Object.assign({},s,t),this.api=new e;var r=function(e){i.options[e]&&("function"==typeof i.options[e]?i.api.addOverlayListener(e,i.options[e]):Array.isArray(i.options[e])?i.options[e].forEach(s=>{i.api.addOverlayListener(e,s)}):console.error("[API] Wrong callback settings in events"))};for(var n in this.options)r(n);this.api.startOverlayEvents()}callHandler(e){this.api.callOverlayHandler(e)}}}));
//# sourceMappingURL=overlay.min.js.map
