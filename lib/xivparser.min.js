!function(s,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(s="undefined"!=typeof globalThis?globalThis:s||self).OverlayParser=e()}(this,(function(){"use strict";class s{constructor(){this.queue=[],this.apiStatus=!1,this.subscribers={},this.wsURL=/[\?&]OVERLAY_WS=([^&]+)/.exec(this.url),this.wsURL?(this.ws=null,this.responsePromises={},this.initWS()):this.initAPI()}initAPI(){if(window.OverlayPluginApi&&window.OverlayPluginApi.ready){var s=this.queue;for(var{obj:e,cb:i}of(this.queue.length=0,this.apiStatus=!0,window.__OverlayCallback=this.triggerEvent.bind(this),s))window.OverlayPluginApi.callHandler(JSON.stringify(e),i)}else setTimeout(this.initAPI,200)}initWS(){ws=new WebSocket(this.wsURL[1]),ws.addEventListener("error",s=>{console.error(s)}),ws.addEventListener("open",()=>{console.log("[API] WebSocket connected");var s=this.queue;for(var e of(this.queue.length=0,this.apiStatus=!0,s))this.sendMessage(e)}),ws.addEventListener("message",s=>{try{s=JSON.parse(s.data)}catch(e){return void console.error("[API] Invalid message received: ",s)}void 0!==s.rseq&&this.responsePromises[s.rseq]?(this.responsePromises[s.rseq](s),delete this.responsePromises[s.rseq]):this.triggerEvent(s)}),ws.addEventListener("close",()=>{this.apiStatus=!1,console.log("[API] Trying to reconnect..."),setTimeout(()=>{this.initWS()},200)})}sendMessage(s,e){this.wsURL?this.apiStatus?ws.send(JSON.stringify(s)):this.queue.push(s):this.apiStatus?window.OverlayPluginApi.callHandler(JSON.stringify(s),e):this.queue.push({obj:s,cb:e})}triggerEvent(s){if(this.subscribers[s.type])for(var e of this.subscribers[s.type])e(s)}addOverlayListener(s,e){this.subscribers[s]||(this.subscribers[s]=[]),this.subscribers[s].push(e)}removeOverlayListener(s,e){if(this.subscribers[s]){var i=this.subscribers[s],t=i.indexOf(e);t>-1&&i.splice(t,1)}}startOverlayEvents(){this.sendMessage({call:"subscribe",events:Object.keys(this.subscribers)})}callOverlayHandler(s){return new Promise(e=>{this.sendMessage(s,s=>{e(null==s?null:JSON.parse(s))})})}}return class{constructor(){this.api=new s}}}));
//# sourceMappingURL=xivparser.min.js.map
