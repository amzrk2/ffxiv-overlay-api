{"version":3,"file":"overlay.min.js","sources":["../src/events.js","../src/main.js","../src/api.js"],"sourcesContent":["'use strict';\r\n\r\nexport default {\r\n  CombatData: null,\r\n  LogLine: null,\r\n  ImportedLogLines: null,\r\n  ChangeZone: null,\r\n  ChangePrimaryPlayer: null,\r\n  OnlineStatusChanged: null,\r\n};\r\n","'use strict';\n\nimport e from './events.js';\nimport API from './api.js';\n\n/**\n * API public functions\n * @function listenEvents\n * @function add\n * @function remove\n * @function removeAll\n * @function list\n * @function call\n */\n\nexport default class OverlayAPI extends API {\n  /**\n   * Init API\n   * @constructor\n   * @extends API\n   * @param {Object} events - Events needs to be init at constructor\n   */\n  constructor(events = {}) {\n    super();\n    this.events = Object.assign({}, e, events);\n    // Register all events\n    for (let event in this.events) {\n      let cbs = this.events[event];\n      if (cbs) {\n        this.add(event, cbs);\n      }\n    }\n  }\n\n  /**\n   * Start listening events\n   * @param {Array} events - Events which to subscribe\n   */\n  listenEvents(events) {\n    this.sendMessage({\n      call: 'subscribe',\n      events,\n    });\n  }\n\n  /**\n   * Add an event listener\n   * @param {String} event - Event to listen\n   * @param {Function|Array} cbs - Callback function(s)\n   */\n  add(event, cbs) {\n    const eventListened = this.subscribers.hasOwnProperty(event);\n    // Init event array\n    if (!eventListened) {\n      this.subscribers[event] = [];\n    }\n    // Push events\n    if (typeof cbs === 'function') {\n      this.subscribers[event].push(cbs);\n    } else if (Array.isArray(cbs)) {\n      cbs.forEach((f) => {\n        this.subscribers[event].push(f);\n      });\n    } else {\n      console.error('[API] Wrong params:', cbs);\n      return;\n    }\n    // Listen event type\n    if (!eventListened) {\n      this.listenEvents([event]);\n    }\n  }\n\n  /**\n   * Remove a listener\n   * @param {String} event - Event type which listener belongs to\n   * @param {Function|Number} id - Function or number which listener to remove\n   */\n  remove(event, id) {\n    const eventListened = this.subscribers.hasOwnProperty(event);\n    if (eventListened) {\n      // Get cb\n      let cb;\n      if (typeof id === 'function') {\n        let cbPos = this.subscribers[event].indexOf(id);\n        if (cbPos >= 0) {\n          this.subscribers[event].splice(pos, 1);\n        }\n      } else if (typeof id === 'number') {\n        cb = this.subscribers[event][id];\n        if (cb) {\n          this.subscribers[event].splice(id, 1);\n        }\n      } else {\n        console.error('[API] Wrong params:', id);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Remove all listener of one event type\n   * @param {String} event - Event type which listener belongs to\n   */\n  removeAll(event) {\n    if (this.subscribers[event] && this.subscribers[event].length > 0) {\n      this.subscribers[event] = [];\n    }\n  }\n\n  /**\n   * List all event listeners\n   */\n  list() {\n    console.log(this.subscribers);\n  }\n\n  /**\n   * This function allows you to call an overlay handler.\n   * These handlers are declared by Event Sources (either built into OverlayPlugin or loaded through addons like Cactbot).\n   * Returns a Promise\n   * @param {Object} msg - Message send to OverlayPlugin\n   */\n  call(msg) {\n    return new Promise((resolve, reject) => {\n      this.sendMessage(msg, (data) => {\n        let rd;\n        try {\n          rd = data == null ? null : JSON.parse(data);\n        } catch (e) {\n          console.error('[API] Error stringfy message: ', data, e);\n          return reject(e);\n        }\n        return resolve(rd);\n      });\n    });\n  }\n}\n","'use strict';\r\n\r\n/**\r\n * Origin api ported from common.js\r\n * @function initWS\r\n * @function initAPI\r\n * @function sendMessage\r\n * @function triggerEvents\r\n */\r\n\r\nexport default class API {\r\n  /**\r\n   * Init API\r\n   * @constructor\r\n   * @param {String} queue - Message queue before OverlayPluginApi is ready\r\n   * @param {Boolean} apiStatus - OverlayPluginApi init status\r\n   * @param {Object} subscribers - All subscribers for events emitted by OverlayPluginApi\r\n   */\r\n  constructor() {\r\n    this.queue = [];\r\n    this.apiStatus = false;\r\n    this.subscribers = {}; // { eventName: [callbackFunc] }\r\n    // Check if in WebSocket mode\r\n    this.wsURL = /[\\?&]OVERLAY_WS=([^&]+)/.exec(window.location.href);\r\n    if (this.wsURL) {\r\n      this.ws = null;\r\n      this.responsePromises = {};\r\n      this.initWS();\r\n    } else {\r\n      this.initAPI();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Init OverlayPluginApi connection\r\n   */\r\n  initAPI() {\r\n    if (!window.OverlayPluginApi || !window.OverlayPluginApi.ready) {\r\n      setTimeout(this.initAPI, 200);\r\n      return;\r\n    }\r\n    // API loaded\r\n    this.apiStatus = true;\r\n    // Bind `this` for callback function called by OverlayAPI, otherwist it will turn to `undefined`\r\n    window.__OverlayCallback = this.triggerEvents.bind(this);\r\n    // Send all messages in queue to OverlayPluginApi\r\n    while (this.queue.length > 0) {\r\n      let { obj, cb } = this.queue.shift();\r\n      window.OverlayPluginApi.callHandler(JSON.stringify(obj), cb);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Init WebSocket connection\r\n   */\r\n  initWS() {\r\n    this.ws = new WebSocket(this.wsURL[1]);\r\n    // Log error\r\n    this.ws.addEventListener('error', (e) => {\r\n      console.error(e);\r\n    });\r\n    // Successfully connected WebSocket\r\n    this.ws.addEventListener('open', () => {\r\n      console.info('[API] WebSocket connected');\r\n      this.apiStatus = true;\r\n      while (this.queue.length > 0) {\r\n        let msg = this.queue.shift();\r\n        this.sendMessage(msg);\r\n      }\r\n    });\r\n    // On message loaded from WebSocket\r\n    this.ws.addEventListener('message', (msg) => {\r\n      try {\r\n        msg = JSON.parse(msg.data);\r\n      } catch (e) {\r\n        console.error('[API] WebSocket invalid message received: ', msg, e);\r\n        return;\r\n      }\r\n      if (msg.rseq !== undefined && this.responsePromises[msg.rseq]) {\r\n        this.responsePromises[msg.rseq](msg);\r\n        delete this.responsePromises[msg.rseq];\r\n      } else {\r\n        this.triggerEvents(msg);\r\n      }\r\n    });\r\n    // Connection failed\r\n    this.ws.addEventListener('close', () => {\r\n      this.apiStatus = false;\r\n      console.info('[API] WebSocket trying to reconnect...');\r\n      // Don't spam the server with retries\r\n      setTimeout(() => {\r\n        this.initWS();\r\n      }, 200);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send message to OverlayPluginApi or push into queue before its init\r\n   * @param {Object} obj - Object to send\r\n   * @param {Function} cb - Callback function\r\n   */\r\n  sendMessage(obj, cb) {\r\n    if (this.wsURL) {\r\n      if (this.apiStatus) {\r\n        try {\r\n          this.ws.send(JSON.stringify(obj));\r\n        } catch (e) {\r\n          console.error('[API] Error stringfy message: ', obj, e);\r\n          return;\r\n        }\r\n      } else {\r\n        this.queue.push(obj);\r\n      }\r\n    } else {\r\n      if (this.apiStatus) {\r\n        try {\r\n          window.OverlayPluginApi.callHandler(JSON.stringify(obj), cb);\r\n        } catch (e) {\r\n          console.error('[API] Error stringfy message: ', obj, e);\r\n          return;\r\n        }\r\n      } else {\r\n        this.queue.push({ obj, cb });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger event function, called by OverlayPluginApi, need `this` binding\r\n   * @param {Object} msg - Data from OverlayPluginApi\r\n   */\r\n  triggerEvents(msg) {\r\n    // If this event type has subscribers\r\n    if (this.subscribers[msg.type]) {\r\n      // Trigger all event's callback\r\n      for (let cb of this.subscribers[msg.type]) {\r\n        cb(msg);\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"names":["CombatData","LogLine","ImportedLogLines","ChangeZone","ChangePrimaryPlayer","OnlineStatusChanged","constructor","queue","apiStatus","subscribers","wsURL","exec","window","location","href","this","ws","responsePromises","initWS","initAPI","OverlayPluginApi","ready","__OverlayCallback","triggerEvents","bind","length","obj","cb","shift","callHandler","JSON","stringify","setTimeout","WebSocket","addEventListener","e","console","error","info","msg","sendMessage","parse","data","undefined","rseq","send","push","type","events","event","Object","assign","cbs","add","listenEvents","call","eventListened","hasOwnProperty","Array","isArray","forEach","f","remove","id","indexOf","splice","pos","removeAll","list","log","Promise","resolve","reject","rd"],"mappings":"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"}