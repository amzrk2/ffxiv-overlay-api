{"version":3,"file":"overlay.min.js","sources":["../src/api.js","../src/events.js","../src/main.js"],"sourcesContent":["'use strict';\r\n\r\n/**\r\n * Ported and modified from ngld/OverlayPlugin\r\n * MIT License\r\n */\r\n\r\nexport default class RawAPI {\r\n  /**\r\n   * Init API\r\n   * @constructor\r\n   * @param {String} queue - Message queue before OverlayPluginApi is ready\r\n   * @param {Boolean} apiStatus - OverlayPluginApi init status\r\n   * @param {Object} subscribers - All subscribers for events emitted by OverlayPluginApi\r\n   */\r\n  constructor() {\r\n    this.queue = [];\r\n    this.apiStatus = false;\r\n    this.subscribers = {}; // { eventName: callbackFunc }\r\n    // Check if in WebSocket mode\r\n    this.wsURL = /[\\?&]OVERLAY_WS=([^&]+)/.exec(this.url);\r\n    if (this.wsURL) {\r\n      this.ws = null;\r\n      this.responsePromises = {};\r\n      this.initWS();\r\n    } else {\r\n      this.initAPI();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Init OverlayPluginApi connection\r\n   */\r\n  initAPI() {\r\n    if (!window.OverlayPluginApi || !window.OverlayPluginApi.ready) {\r\n      setTimeout(this.initAPI, 200);\r\n      return;\r\n    }\r\n    // API loaded\r\n    let tempQueue = this.queue;\r\n    this.queue.length = 0;\r\n    this.apiStatus = true;\r\n    // Bind `this` for callback function called by OverlayAPI, otherwist it will turn to `undefined`\r\n    window.__OverlayCallback = this.triggerEvent.bind(this);\r\n    // Send all messages in queue to OverlayPluginApi\r\n    for (let { obj, cb } of tempQueue) {\r\n      window.OverlayPluginApi.callHandler(JSON.stringify(obj), cb);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Init WebSocket connection\r\n   */\r\n  initWS() {\r\n    ws = new WebSocket(this.wsURL[1]);\r\n    // Log error\r\n    ws.addEventListener('error', (e) => {\r\n      console.error(e);\r\n    });\r\n    // Successfully connected WebSocket\r\n    ws.addEventListener('open', () => {\r\n      console.log('[API] WebSocket connected');\r\n      let tempQueue = this.queue;\r\n      this.queue.length = 0;\r\n      this.apiStatus = true;\r\n      for (let msg of tempQueue) {\r\n        this.sendMessage(msg);\r\n      }\r\n    });\r\n    // On message loaded from WebSocket\r\n    ws.addEventListener('message', (msg) => {\r\n      try {\r\n        msg = JSON.parse(msg.data);\r\n      } catch (e) {\r\n        console.error('[API] Invalid message received: ', msg);\r\n        return;\r\n      }\r\n      if (msg.rseq !== undefined && this.responsePromises[msg.rseq]) {\r\n        this.responsePromises[msg.rseq](msg);\r\n        delete this.responsePromises[msg.rseq];\r\n      } else {\r\n        this.triggerEvent(msg);\r\n      }\r\n    });\r\n    // Connection failed\r\n    ws.addEventListener('close', () => {\r\n      this.apiStatus = false;\r\n      console.log('[API] Trying to reconnect...');\r\n      // Don't spam the server with retries\r\n      setTimeout(() => {\r\n        this.initWS();\r\n      }, 200);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send message to OverlayPluginApi or push into queue before its init\r\n   * @param {Object} obj - Object to send\r\n   * @param {Function} cb - Callback function\r\n   */\r\n  sendMessage(obj, cb) {\r\n    if (this.wsURL) {\r\n      if (this.apiStatus) {\r\n        try {\r\n          ws.send(JSON.stringify(obj));\r\n        } catch (e) {\r\n          console.error('[API] Error stringfy message: ', obj);\r\n          return;\r\n        }\r\n      } else {\r\n        this.queue.push(obj);\r\n      }\r\n    } else {\r\n      if (this.apiStatus) {\r\n        try {\r\n          window.OverlayPluginApi.callHandler(JSON.stringify(obj), cb);\r\n        } catch (e) {\r\n          console.error('[API] Error stringfy message: ', obj);\r\n          return;\r\n        }\r\n      } else {\r\n        this.queue.push({ obj, cb });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger event function, called by OverlayPluginApi, need `this` binding\r\n   * @param {Object} msg - Data from OverlayPluginApi\r\n   */\r\n  triggerEvent(msg) {\r\n    // If this event type has subscribers\r\n    if (this.subscribers[msg.type]) {\r\n      // Trigger all event's callback\r\n      for (let cb of this.subscribers[msg.type]) {\r\n        cb(msg);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add an subscriber\r\n   * @param {String} event - Event which is to subscribe\r\n   * @param {Function} cb - Callback function\r\n   */\r\n  addOverlayListener(event, cb) {\r\n    if (!this.subscribers[event]) {\r\n      this.subscribers[event] = [];\r\n    }\r\n    this.subscribers[event].push(cb);\r\n  }\r\n\r\n  /**\r\n   * Remove an subscriber\r\n   * @param {String} event - Event which is to unsubscribe\r\n   * @param {Function} cb - Callback function\r\n   */\r\n  removeOverlayListener(event, cb) {\r\n    if (this.subscribers[event]) {\r\n      let list = this.subscribers[event];\r\n      let pos = list.indexOf(cb);\r\n      if (pos > -1) list.splice(pos, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start listening events\r\n   */\r\n  startOverlayEvents() {\r\n    this.sendMessage({\r\n      call: 'subscribe',\r\n      events: Object.keys(this.subscribers),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This function allows you to call an overlay handler.\r\n   * These handlers are declared by Event Sources (either built into OverlayPlugin or loaded through addons like Cactbot).\r\n   * @param {Object} msg\r\n   */\r\n  callOverlayHandler(msg) {\r\n    return new Promise((resolve, reject) => {\r\n      this.sendMessage(msg, (data) => {\r\n        try {\r\n          const rd = data == null ? null : JSON.parse(data);\r\n        } catch (e) {\r\n          console.error('[API] Error stringfy message: ', data);\r\n          return reject(e);\r\n        }\r\n        return resolve(rd);\r\n      });\r\n    });\r\n  }\r\n}\r\n","'use strict';\r\n\r\nexport default {\r\n  CombatData: (data) => {\r\n    console.log(data);\r\n  },\r\n  LogLine: null,\r\n  ImportedLogLines: null,\r\n  ChangeZone: null,\r\n  ChangePrimaryPlayer: null,\r\n  OnlineStatusChanged: null,\r\n};\r\n","'use strict';\n\nimport RawAPI from './api.js';\nimport rEvents from './events.js';\n\nexport default class OverlayAPI {\n  /**\n   * Init API\n   * @constructor\n   * @param {String} options - Message queue before OverlayPluginApi is ready\n   * @param {API} api - Overlay API\n   */\n  constructor(events = {}) {\n    this.options = Object.assign({}, rEvents, events);\n    this.api = new RawAPI();\n    // Register all events\n    for (let event in this.options) {\n      if (this.options[event]) {\n        if (typeof this.options[event] === 'function') {\n          this.api.addOverlayListener(event, this.options[event]);\n        } else if (Array.isArray(this.options[event])) {\n          this.options[event].forEach((cb) => {\n            this.api.addOverlayListener(event, cb);\n          });\n        } else {\n          console.error('[API] Wrong callback settings in events');\n        }\n      }\n    }\n    // Start event listening\n    this.api.startOverlayEvents();\n  }\n\n  /**\n   * This function allows you to call an overlay handler.\n   * These handlers are declared by Event Sources (either built into OverlayPlugin or loaded through addons like Cactbot).\n   * @param {Object} msg\n   */\n  callHandler(msg) {\n    this.api.callOverlayHandler(msg);\n  }\n}\n"],"names":["RawAPI","constructor","queue","apiStatus","subscribers","wsURL","exec","this","url","ws","responsePromises","initWS","initAPI","window","OverlayPluginApi","ready","tempQueue","obj","cb","length","__OverlayCallback","triggerEvent","bind","callHandler","JSON","stringify","setTimeout","WebSocket","addEventListener","e","console","error","log","msg","sendMessage","parse","data","undefined","rseq","send","push","type","addOverlayListener","event","removeOverlayListener","list","pos","indexOf","splice","startOverlayEvents","call","events","Object","keys","callOverlayHandler","Promise","resolve","reject","rd","CombatData","LogLine","ImportedLogLines","ChangeZone","ChangePrimaryPlayer","OnlineStatusChanged","options","assign","rEvents","api","_this","Array","isArray","forEach"],"mappings":"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"}